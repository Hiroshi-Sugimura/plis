<!DOCTYPE html>
<html lang="en">
<?js
  if (this.layoutOptions.wantDate) {
    Date.prototype.toLongDate =
      function (locale) {
        return new Date().toLocaleDateString(locale || 'en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
      }
  }

  function toAssetLink(src) {
    const [extension] = (src.href || '').split('.').reverse()
    const ext = extension.toLowerCase()
    if (ext === 'css') {
       src.type = 'text/css'
       src.media = 'screen'
       src.rel = 'stylesheet'
    } else if (!src.type || !src.rel &&
        ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tif', 'tiff', 'ico', 'webp', 'svg'].includes(ext)) {
        const mime =
            ['jpg', 'jpeg'].includes(ext)
            ? 'jpeg'
            : ['tif', 'tiff'].includes(ext)
                ? 'tiff'
                : (ext === 'svg')
                    ? 'svg+xml'
                    : ext
       src.type = src.type || (ext === 'ico') ? 'image/x-icon' : `image/${mime}`
       src.rel = src.rel || 'icon'
    }
    return src
  }
?>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <meta name="generator" content="jsdoc v<?js= env.version.number ?>">
    <?js if (this.meta.length) { ?>
      <?js this.meta.forEach(function(src){ ?>
        <meta <?js=Object.keys(src).map(key => `${key}="${src[key]}"`).join(" ") ?>>
      <?js }) ?>
    <?js } ?>
    <title>
      <?js if (this.project !== undefined && this.project.title !== undefined) { ?>
      <?js= this.project.title ?> | <?js= title ?>
      <?js } else { ?>
      <?js= title ?>
      <?js } ?>
    </title>
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" media="screen" href="styles/jsdoc-default.css">
    <link type="text/css" rel="stylesheet" media="screen" href="styles/clean-jsdoc-theme-base.css">
    <link type="text/css" rel="stylesheet" media="screen" href="styles/clean-jsdoc-colorscheme.css">
    <link type="text/css" rel="stylesheet" media="screen" href="styles/<?js= this.theme ?>">

    <?js if(this.layoutOptions.themeName.toLowerCase() === 'dynamic') { ?>
    <script>
      if (window.matchMedia) {
        var styles = Array.prototype.slice.call(document.querySelectorAll('link[rel="stylesheet"]'))
        var theme = styles.filter(function(s) { return /(theme).*(light|dark).*\.css$/i.test(s.href) })[0]
        if (theme) {
          theme.href =
            matchMedia('(prefers-color-scheme: dark)').matches
            ? 'styles/clean-jsdoc-theme-dark.css'
            : 'styles/clean-jsdoc-theme-light.css'

          document.addEventListener("DOMContentLoaded", function () {
            var themeId = document.getElementById('clean-jsdoc-theme')
            if (themeId)
              themeId.innerText = theme.href.split(/\W/).indexOf('dark') > -1 ? 'dark' : 'light'
          })
        }
      }
    </script>
    <?js } ?>

    <?js if(this.layoutOptions.wantOverlay) { ?>
    <link type="text/css" rel="stylesheet" media="screen" href="styles/third-party/overlayscrollbars.min.css">
    <?js } ?>

    <?js if(this.externalAssets.length) { ?>
      <?js this.externalAssets.forEach(src => { ?>
        <link <?js=Object.keys(src).map(key => `${key}="${toAssetLink(src)[key]}"`).join(" ") ?>>
      <?js }) ?>
    <?js } ?>

    <?js if(this.staticStyles.length) { ?>
      <?js this.staticStyles.forEach(function(source){ ?>
        <link type="text/css" rel="stylesheet" href="<?js= source ?>">
      <?js }) ?>
    <?js } ?>

    <?js if (this.layoutOptions.noSearch) { ?>
      <style>
        nav > h2 {
            padding: 0;
        }
      </style>
    <?js } ?>
    <?js if (this.layoutOptions.hideLangNames) { ?>
      <style>
        .code-lang-name  {
            display: none;
        }
        .readme code {
            margin: 0;
        }
      </style>
    <?js } ?>

    <style>
      <?js
        const isTitleSet = env.opts && env.opts.theme_opts && env.opts.theme_opts.title
        const homeTitle = isTitleSet ? env.opts.theme_opts.title.trim() : title
        const headRoom = Math.ceil(homeTitle.length * 2.5)
      ?>
      .sidebar-list-div {
          margin-top: <?js= headRoom?>px;
      }
    </style>

    <?js if (this.inlineStyle !== undefined ) { ?>
    <style>
      <?js= this.inlineStyle ?>
    </style>
    <?js } ?>

    <?js if(this.externalScripts.length) { ?>
      <?js this.externalScripts.forEach(function(src){ ?>
        <script <?js=Object.keys(src).map(key => `${key}="${src[key]}"`).join(" ")?>></script>
      <?js }) ?>
    <?js } ?>

    <?js if(this.staticScripts.length) { ?>
        <?js this.staticScripts.forEach(function(source){ ?>
        <script src="<?js= source ?>"></script>
        <?js }) ?>
    <?js } ?>
</head>
<body>
<?js= this.partial('icons.tmpl') ?>

<nav id="navbar" class="navbar">
    <?js if (this.project !== undefined) { ?>
    <div class="gh-meta">
    <p><b>Version</b> <?js= this.project.version || "1.0.0" ?></p>
    <p>
      <a href="<?js= this.project.repo ?>" title="View project on GitHub" aria-hidden="true"><span class="fa fa-github"></span></a>
    </p>
    </div>
    <?js } ?>
    <?js= this.nav ?>
</nav>

<div class="navbar-ham" id="navbar-ham">
  <div data-test="navbar-ham-clickable">
    <div class="first"></div>
    <div class="second"></div>
    <div class="third"></div>
  </div>
</div>

<div id="main" class="main-content">
    <?js if (title.toLowerCase() !== 'home') { ?>
    <h1 class="page-title"><?js= title ?></h1>
    <?js } ?>
    <?js= content ?>
</div>

<footer id="footer" class="footer">
  <?js if (this.footer) { ?>
  <?js= this.footer ?>
  <?js } else { ?>
  Generated by <a href="https://github.com/jsdoc3/jsdoc">JSDoc <?js= env.version.number ?></a><?js if(this.layoutOptions.wantDate) { ?> on <?js= (new Date().toLongDate()) ?><?js } ?> using the <a href="https://github.com/clean-jsdoc/clean-jsdoc-es5">clean-jsdoc</a> <span id="clean-jsdoc-theme"><?js= this.layoutOptions.themeName ?></span> theme.
  <?js } ?>
</footer>

<script src="scripts/third-party/prettify.min.js"></script>
<script src="scripts/third-party/lang-css.js"></script>
<script src="scripts/third-party/fuse.js"></script>
<script src="scripts/search.js" defer></script>
<script src="scripts/misc.js" defer></script>
<script>prettyPrint();</script>
<script src="scripts/linenumber.js" defer></script>
<script src="scripts/fix-code-block.js" defer></script>
<script src="scripts/fix-navbar.js" defer></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
      if (document.getElementById('search-box')) {
          var list = [<?js= this.searchList ?>];
          setupSearch(list)
      }
})
</script>

<?js if(this.layoutOptions.wantOverlay) { ?>
<script src="scripts/third-party/overlayscrollbars.browser.es5.min.js"></script>
<script>
  var options = JSON.parse('<?js= this.overlayScrollbar ?>')
  var optString = (function f(o) {
    var optList =
      Object.keys(o).reduce(
        (function (a, k) { a.push([k, o[k]]); return a }), []);
    return (optList.reduce(
      (function (str, e) {
        if (typeof (e[1]) === 'object')
          return str += e[0] + ': { ' + f(e[1]) + ' }, ';
        else
          return str += [e[0]] + ': ' + e[1] + ', ';
      }), '').slice(0, -2))
  })(options)
  console.log('Loaded OverlayScrollbars.js with options:', optString || 'none')
  document.addEventListener("DOMContentLoaded", function () {
      OverlayScrollbarsGlobal.OverlayScrollbars(document.body, options)
  })
</script>
<?js } ?>

<script>
    function replaceIcon() {
        var metaField = document.querySelector('.gh-meta')
        var iconField = document.querySelector('.gh-meta p ~ p')
        var icon = document.querySelector('.fa.fa-github')
        icon.style.fontSize = 'initial'
        icon.style.display = 'inline-block'
        icon.style.margin = '1rem 0'
        icon.style. padding = "0 .75em"
        icon.style.fontWeight = 700
        icon.innerText = 'Homepage'
        iconField.style.margin = '0'
    }

    var fa = document.createElement('link')
    fa.href = 'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css'
    fa.rel = 'stylesheet'
    fa.type = 'text/css'
    fa.onerror = replaceIcon
    var style = document.getElementsByTagName('link')[0]
    style.parentNode.insertBefore(fa, style)
    // hide emoji markup when not publishing to GitHub
    var warnIcon = document.querySelector('.fa.fa-warning')
    if (warnIcon) warnIcon.innerText = ''
</script>
</body>
</html>
